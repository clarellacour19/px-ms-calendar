# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger: none

parameters:
- name: SonarQube
  displayName: Enable SonarQube
  type: string
  values:
  - True
  - False

stages:

  - stage: Build
    jobs:
    - job: Build
      pool:
        name: Azure Pipelines
        vmImage: 'ubuntu-latest'
      steps:
      - powershell: '$env:CI="true"'
        displayName: 'Set Environment Variables'
      - task: Docker@2
        displayName: Login to ACR
        inputs:
          containerRegistry: 'mbnpmicroservicesregistry'
          command: 'login'
      - task: PowerShell@2
        displayName: Set sonarqube branch
        condition: eq('${{ parameters.SonarQube }}', 'true')
        inputs:
          targetType: 'inline'
          script: |
            $branch = "$(Build.SourceBranch)"
            $branchName = $branch.Substring($branch.IndexOf("/",$branch.IndexOf("/")+1)+1)
            $dockerFile = Get-Content -Path .\DockerfileBO
            $sonarBranchPattern = "/d:sonar.branch.name=.*"
            $sonarBranchName = $dockerFile | Select-String -Pattern $sonarBranchPattern
            $updatedSonarBranch = $sonarBranchName.Matches.Value -replace "`"$", "-$branchName-NonProd`""
            Write-Host("Sonar branch: $updatedSonarBranch")
            $dockerFile = $dockerFile -replace $sonarBranchPattern, $updatedSonarBranch
            $dockerFile | Set-Content -Path .\DockerfileBO
      # - task: Docker@2
      #   displayName: Docker Build and Push
      #   inputs:
      #     containerRegistry: 'mbnpmicroservicesregistry'
      #     repository: 'calendarorganizer'
      #     command: 'buildAndPush'
      #     Dockerfile: 'Dockerfile'
      #     tags: '$(Build.BuildNumber)'
      
      - task: Docker@2
        displayName: Docker Build
        inputs:
          containerRegistry: 'mbnpmicroservicesregistry'
          repository: 'calendarorganizer'
          command: 'build'
          Dockerfile: 'Dockerfile'
          tags: '$(Build.BuildNumber)'

      - task: Docker@2
        displayName: Docker Push
        inputs:
          containerRegistry: 'mbnpmicroservicesregistry'
          repository: 'calendarorganizer'
          command: 'push'
          tags: '$(Build.BuildNumber)'

      - task: CmdLine@2
        displayName: Docker Pull from ACR
        inputs:
          script: 'docker pull mbnpmicroservicesregistry.azurecr.io/calendarorganizer:$(Build.BuildNumber)'

      - task: Docker@2
        displayName: Logout of ACR
        inputs:
          containerRegistry: 'mbnpmicroservicesregistry'
          command: 'logout'

      - task: CmdLine@2
        displayName: Tag JFrog Image
        inputs:
          script: 'docker tag mbnpmicroservicesregistry.azurecr.io/calendarorganizer:$(Build.BuildNumber) png.jfrog.io/pamper-calendarorganizer-virtual/calendarorganizer:$(Build.BuildNumber)'

      - task: ArtifactoryDocker@1 
        displayName: Push to JFrog
        inputs:
          command: 'push'
          artifactoryService: 'PX-JFrog-Artifactory-ServiceConnection'
          targetRepo: 'pamper-calendarorganizer-virtual'
          imageName: 'png.jfrog.io/pamper-calendarorganizer-virtual/calendarorganizer:$(Build.BuildNumber)'
          collectBuildInfo: true
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          projectKey: 'pamper'
          includeEnvVars: true
      - task: ArtifactoryCollectIssues@1
        displayName: Jfrog Collect Build Issues
        inputs:
          artifactoryService: 'PX-JFrog-Artifactory-ServiceConnection'
          configSource: 'taskConfiguration'
          taskConfig: |
            version: 1
            issues:
                trackerName: ADO
                regexp: (.+-[0-9]+)\s-\s(.+) 
                keyGroupIndex: 1
                summaryGroupIndex: 2
                trackerUrl: https://dev.azure.com/pg-consumer/px-pampers-restage/_backlogs/backlog/pampers-general/Backlog%20items
                aggregate: true
                aggregationStatus: RELEASED
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          projectKey: 'pamper'

      - task: ArtifactoryPublishBuildInfo@1
        displayName: Jfrog Publish Build Issues
        inputs:
          artifactoryService: 'PX-JFrog-Artifactory-ServiceConnection'
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          projectKey: 'pamper'

      - task: ArtifactoryXrayScan@1
        displayName: JFrog XRay Scan
        inputs:
          artifactoryService: 'PX-JFrog-Artifactory-ServiceConnection'
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          projectKey: 'pamper'
          allowFailBuild: false


  - stage: Deploy
    jobs:
    - job: Deploy
      pool:
        name: Azure Pipelines
        vmImage: 'ubuntu-latest'
      steps:
      - powershell: '$env:CI="true"'
        displayName: 'Set Environment Variables'
      - task: AzureWebAppContainer@1
        displayName: 'Deploy to slot'
        inputs:
          azureSubscription: 'AZ-RG-CS-PX-MB-Services-PaaS-NA-NonProd-01'
          appName: 'px-calendar-nonprod'
          deployToSlotOrASE: true
          resourceGroupName: AZ-RG-CS-PX-MB-Services-PaaS-NA-NonProd-01
          containers: 'mbnpmicroservicesregistry.azurecr.io/calendarorganizer:$(Build.BuildNumber)'

  - stage: Test
    jobs:
    - job: Test
      pool:
        name: Azure Pipelines
        vmImage: 'ubuntu-latest'
      steps:
      - script: 'sudo npm install newman --global'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        displayName: 'Install newman'
      - script: 'newman run MB_Microservice.postman_collection.json -e MB_Microservice_Stage.postman_environment.json --reporters cli,junit --reporter-junit-export Results/jUnitReport.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/_px-newman/QA'
        displayName: 'Run API Test'
        continueOnError: true
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFiles: '**/jUnitReport*.xml'